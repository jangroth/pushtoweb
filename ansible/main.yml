---
- hosts: localhost
  gather_facts: False
  connection: local

  tasks:
    - name: Debug
      debug:
        msg: "Building environment '{{env.name}}'"

    - name: Create container for packaging lambda
      shell: ../scripts/build-lambda-packaging-container.sh
      args:
        chdir: ../scripts

    - name: Use container to package lambda
      shell: ../scripts/package-lambda-with-container.sh
      args:
        chdir: ../scripts

    - name: Create bucket for lambda
      s3_bucket:
        region: "{{ region }}"
        name: "{{ env.name }}-push-to-web-lambda-code-bucket"
      register: task_output

    - name: Register bucket name
      set_fact:
        lambda_code_bucket: "{{ task_output['name'] }}"

    - name: Debug
      debug:
        msg: "Building environment '{{ dirs.build }}/{{ lambda.zip }}'"

    - name: Get checksum of lambda package
      stat:
        path: "{{ dirs.build }}/{{ lambda.zip }}"
      register: task_output

    - name: Register lambda name
      set_fact:
        lambda_name: "{{ lambda.zip }}-{{ task_output.stat.checksum}}"

    - name: Get names of uploaded lambdas
      aws_s3:
        region: "{{ region }}"
        bucket:  "{{ lambda_code_bucket }}"
        object: "{{ lambda_name }}"
        mode: list
      register: task_output

    - name: Debug
      debug:
        msg: "Lambda already exists, skipping upload..."
      when: "lambda_name in task_output.s3_keys"

    - name: Upload lambda to {{ lambda_code_bucket }}
      aws_s3:
        region: "{{ region }}"
        bucket: "{{ lambda_code_bucket }}"
        object: "{{ lambda_name }}"
        src: "{{ dirs.build }}/{{ lambda.zip }}"
        mode: put
      when: "lambda_name not in task_output.s3_keys"

    - name: Deploy stack
      cloudformation:
        stack_name: "{{env.name}}-push-to-web"
        template: "cfn/web-infra.yaml"
        template_parameters:
          WebSiteBucketName: "{{ env.name }}-push-to-web-site"
          LambdaCodeBucketName: "{{ lambda_code_bucket }}"
          LambdaName: "{{ lambda_name }}"
          RepoUrl: "{{ repo.url }}"
        state: present

    - name: Upload static files
      s3_sync:
        region: "{{ region }}"
        bucket:  "{{ env.name }}-push-to-web-site"
        file_root: "../www"
        file_change_strategy: "checksum"
        permission: "public-read"
